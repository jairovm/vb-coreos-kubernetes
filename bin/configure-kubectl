#!/usr/bin/env ruby
require 'optparse'

class ConfigureKubectl
  ROOT_PATH  = File.expand_path('../../', __FILE__).freeze
  CERTS_DIR  = File.join(ROOT_PATH, 'assets/certs').freeze

  attr_accessor :options

  def initialize(arguments)
    parse arguments
  end

  def process
    exit 1 unless valid?

    system <<-EOS
      kubectl config set-cluster default-cluster \
        --server=https://#{options[:master_host]} \
        --certificate-authority=#{File.join(CERTS_DIR, 'ca.pem')}

      kubectl config set-credentials default-admin \
        --certificate-authority=#{File.join(CERTS_DIR, 'ca.pem')} \
        --client-key=#{File.join(CERTS_DIR, 'admin-key.pem')} \
        --client-certificate=#{File.join(CERTS_DIR, 'admin.crt')}

      kubectl config set-context default-system \
        --cluster=default-cluster \
        --user=default-admin

      kubectl config use-context default-system    
    EOS
  end

private

  def valid?
    errors = []
    errors << '--master-host is required'     if options[:master_host].nil?

    $stderr.puts errors.join("\n") unless errors.empty?
    errors.empty?
  end
  
  def parse(arguments)
    self.options = {}

    OptionParser.new do |opts|
      opts.banner = "Usage: bin/configure-kubectl [options]"

      opts.on(
        '--master-host MASTER_HOST',
        'The address of the master node'
      ) do |master_host|
        options[:master_host] = master_host
      end

      opts.on('-h', '--help', 'Display this screen') do
        puts opts
        exit
      end
    end.parse!(arguments)
  end
end

ConfigureKubectl.new(ARGV).process
